package com.ianthomas.restapidemo.service;

import com.ianthomas.restapidemo.persistence.model.Customer;
import com.ianthomas.restapidemo.persistence.model.Inventory;
import com.ianthomas.restapidemo.persistence.repository.CustomerRepository;
import com.ianthomas.restapidemo.persistence.repository.InventoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
public class CustomerService {

    private final CustomerRepository customerRepository;

    private final InventoryRepository inventoryRepository;

    @Autowired
    public CustomerService(CustomerRepository customerRepository, InventoryRepository inventoryRepository) {
        this.customerRepository = customerRepository;
        this.inventoryRepository = inventoryRepository;
    }

    public List<Customer> getCustomers() {
        return customerRepository.findCustomersById();
    }

    public void addCustomer(Customer customer) {
        // Checking for existing email since ID is autogenerated
        Optional<Customer> emailMatch = customerRepository.findCustomerByEmail(customer.getEmail());
        if (emailMatch.isPresent()) {
            throw new IllegalStateException("Customer Id " + customer.getId() + " already exists");
        }
        customerRepository.save(customer);
    }

    @Transactional
    public void updateCustomer(int id, String name, String email, String item_name, Float item_price) {
        Customer customer = customerRepository.findById(id)
                .orElseThrow(() -> new IllegalStateException("Customer id " + id + " does not exist"));

        if (!Objects.equals(customer.getName(), name) && name.length() > 0) {
            customer.setName(name);
        }
        if (!Objects.equals(customer.getEmail(), email) && email.length() > 0) {
            customer.setEmail(email);
        }

        // Add item only if it exists in Inventory
        if (item_name != null && item_price != null) {
            Optional<Inventory> itemMatch = inventoryRepository.findItem(item_name, item_price);
            if (!itemMatch.isPresent()){
                throw new IllegalStateException("Item does not exist in Inventory");
            }
            // TODO: Get Inventory item, if it exists

            // TODO: Add Inventory item to Customer Items


        }

        System.out.println("Updated customer item: " + id + ".");

    }
}
